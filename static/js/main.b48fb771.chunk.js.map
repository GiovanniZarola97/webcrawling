{"version":3,"sources":["serviceWorker.js","components/ResultsPage.js","components/SearchPage.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","useStyles","makeStyles","table","minWidth","ResultsPage","props","classes","Container","Typography","component","variant","style","textAlign","marginTop","marginBottom","Button","endIcon","color","marginLeft","TableContainer","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","TableBody","SearchPage","handleWordsChange","event","setState","words","target","value","handleGeographyChange","geography","handleCategoryChange","category","handleTypologyChange","typology","handleStartDateChange","startDate","handleEndDateChange","endDate","handleSubmit","Date","state","getTime","showAlert","textAlert","resultsView","undefined","this","maxWidth","CssBaseline","paper","form","noValidate","type","Alert","severity","Grid","container","spacing","item","xs","TextField","fullWidth","id","label","name","onChange","InputLabelProps","shrink","submit","onClick","IconButton","React","Component","withStyles","theme","display","flexDirection","alignItems","width","margin","App","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b48fb771.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Container from '@material-ui/core/Container';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport BackupIcon from '@material-ui/icons/Backup';\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        minWidth: 650,\r\n    },\r\n});\r\n\r\nconst ResultsPage = (props) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Container >\r\n            <Typography component=\"h1\" variant=\"h5\" style={{ textAlign: 'center', marginTop: '50px', marginBottom: '30px' }}>\r\n                Risultati\r\n            </Typography>\r\n            <div style={{ textAlign: 'right' }}>\r\n                <Button endIcon={<BackupIcon/>} variant=\"contained\" color=\"primary\" style={{ marginLeft: '10px', marginBottom: '10px' }}>Salva sul server</Button>\r\n                <Button endIcon={<GetAppIcon/>} variant=\"contained\" color=\"primary\" style={{ marginLeft: '10px', marginBottom: '10px' }}>Download</Button>\r\n            </div>\r\n            <TableContainer component={Paper}>\r\n                <Table className={classes.table} aria-label=\"simple table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Parole</TableCell>\r\n                            <TableCell >Geografia</TableCell>\r\n                            <TableCell >Periodo</TableCell>\r\n                            <TableCell >Categoria</TableCell>\r\n                            <TableCell >Tipologia</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {/*TODO: Aggiungere map con i dati */}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default ResultsPage;","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport Alert from '@material-ui/lab/Alert'\r\nimport ResultsPage from './ResultsPage';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\n\r\nconst styles = theme => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n});\r\n\r\nclass SearchPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { resultsView: false, words: undefined, geography: undefined, category: undefined, typology: undefined, startDate: undefined, endDate: undefined, showAlert: false, textAlert: undefined };\r\n    }\r\n\r\n    handleWordsChange = (event) => {\r\n        this.setState({ words: event.target.value });\r\n    }\r\n\r\n    handleGeographyChange = (event) => {\r\n        this.setState({ geography: event.target.value });\r\n    }\r\n\r\n    handleCategoryChange = (event) => {\r\n        this.setState({ category: event.target.value });\r\n    }\r\n\r\n    handleTypologyChange = (event) => {\r\n        this.setState({ typology: event.target.value });\r\n    }\r\n\r\n    handleStartDateChange = (event) => {\r\n        this.setState({ startDate: event.target.value });\r\n    }\r\n\r\n    handleEndDateChange = (event) => {\r\n        this.setState({ endDate: event.target.value });\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        if ((new Date(this.state.startDate).getTime() > new Date(this.state.endDate).getTime())) {\r\n            this.setState({ showAlert: true, textAlert: 'Data inizio non può essere successiva a data fine.' })\r\n        }\r\n        else {\r\n            this.setState({ resultsView: true })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            this.state.resultsView === false ?\r\n                <Container component=\"main\" maxWidth=\"xs\">\r\n                    <CssBaseline />\r\n                    <div className={classes.paper}>\r\n                        <Typography component=\"h1\" variant=\"h5\">\r\n                            Effettua la ricerca\r\n                    </Typography>\r\n\r\n                        <form className={classes.form} noValidate type='post'>\r\n                            {this.state.showAlert ?\r\n                                <Alert severity=\"error\" style={{ marginBottom: '10px' }}>{this.state.textAlert}</Alert>\r\n                                : null\r\n                            }\r\n                            <Grid container spacing={2}>\r\n                                <Grid item xs={12}>\r\n                                    <TextField\r\n                                        variant=\"outlined\"\r\n                                        fullWidth\r\n                                        id=\"words\"\r\n                                        label=\"Parole\"\r\n                                        name=\"words\"\r\n                                        onChange={this.handleWordsChange}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <TextField\r\n                                        variant=\"outlined\"\r\n                                        fullWidth\r\n                                        id=\"geography\"\r\n                                        label=\"Geografia\"\r\n                                        name=\"geography\"\r\n                                        onChange={this.handleGeographyChange}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <TextField\r\n                                        variant=\"outlined\"\r\n                                        fullWidth\r\n                                        id=\"category\"\r\n                                        label=\"Categoria\"\r\n                                        name=\"category\"\r\n                                        onChange={this.handleCategoryChange}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <TextField\r\n                                        variant=\"outlined\"\r\n                                        fullWidth\r\n                                        id=\"typology\"\r\n                                        label=\"Tipologia\"\r\n                                        name=\"typology\"\r\n                                        onChange={this.handleTypologyChange}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <TextField\r\n                                        variant=\"outlined\"\r\n                                        fullWidth\r\n                                        id=\"start-date\"\r\n                                        name=\"start-date\"\r\n                                        type=\"date\"\r\n                                        label=\"Data inizio\"\r\n                                        InputLabelProps={{\r\n                                            shrink: true,\r\n                                        }}\r\n                                        onChange={this.handleStartDateChange}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <TextField\r\n                                        variant=\"outlined\"\r\n                                        fullWidth\r\n                                        id=\"end-date\"\r\n                                        name=\"end-date\"\r\n                                        type=\"date\"\r\n                                        label=\"Data fine\"\r\n                                        InputLabelProps={{\r\n                                            shrink: true,\r\n                                        }}\r\n                                        onChange={this.handleEndDateChange}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Button\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className={classes.submit}\r\n                                onClick={this.handleSubmit}\r\n                                endIcon={<SearchIcon/>}\r\n                            >\r\n                                CERCA\r\n                     </Button>\r\n                        </form>\r\n                    </div>\r\n                </Container> :\r\n                <div>\r\n                    <IconButton aria-label=\"indietro\" onClick={() => this.setState({resultsView: false, showAlert: false, textAlert: undefined})}>\r\n                         <ArrowBackIcon />\r\n                    </IconButton>\r\n                    <ResultsPage />\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(SearchPage);","import React from 'react';\nimport './App.css';\nimport SearchPage from './components/SearchPage';\n\nfunction App() {\n  return (\n    <SearchPage/>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}